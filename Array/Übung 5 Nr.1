using System;

class Program
{
    static void Main()
    {

        /*
        Sicher, ich kann das zusammenfassen.

Unsere ursprüngliche Aufgabe bestand darin, eine Anwendung zu erstellen, die die Werte einer quadratischen Funktion f(x) = ax² + bx + c berechnet und ausgibt. Wir haben ein C#-Programm erstellt, das die Benutzereingaben für a, b und c einliest und dann die Funktionswerte für x von 0 bis 10 berechnet und ausgibt. Das Programm lief in einer Konsolenumgebung und die Ergebnisse wurden auf der Konsole ausgegeben.

Danach wollten wir weitere Informationen über die Funktion berechnen und ausgeben, einschließlich des Scheitelpunkts der Parabel, der Nullstellen und des Schnittpunkts der Funktion mit der Y-Achse. Wir haben die Formeln für diese Eigenschaften in das Programm aufgenommen und die berechneten Werte auf der Konsole ausgegeben.

Schließlich wurde die Idee vorgeschlagen, die Funktion visuell darzustellen. Hier stießen wir auf ein Problem. Die Standardbibliotheken von C#, insbesondere in der Konsolenumgebung, unterstützen keine direkte grafische Ausgabe oder Datenvisualisierung. Um dies zu erreichen, müssten wir eine zusätzliche Bibliothek verwenden, wie z.B. OxyPlot. Allerdings erfordert OxyPlot eine grafische Benutzeroberfläche und kann nicht direkt in einer Konsolenumgebung verwendet werden.

Eine weitere Herausforderung besteht darin, dass solche Bibliotheken nicht standardmäßig in .NET eingebaut sind. Die Installation und Einrichtung einer solchen Bibliothek kann zusätzliche Schritte erfordern und ist möglicherweise nicht praktikabel oder wünschenswert, abhängig vom Anwendungsfall und den vorhandenen Ressourcen.

Eine andere Möglichkeit besteht darin, eine andere Programmiersprache zu verwenden, die direkt grafische Ausgaben und Datenvisualisierung unterstützt. Ein gutes Beispiel dafür ist Python, das Bibliotheken wie Matplotlib und Seaborn bietet, die speziell für die Visualisierung von Daten entwickelt wurden.

Zusammengefasst haben wir ein C#-Programm erstellt, das die Eigenschaften einer quadratischen Funktion berechnet und ausgibt, aber aufgrund der Einschränkungen der Programmiersprache und der Umgebung konnten wir die Funktion nicht direkt visualisieren.
        */
        //Eingabe 
        Console.WriteLine("f(x)= ax² + bx + c");
        Console.WriteLine();
        Console.WriteLine("Bitte gebe dein a ein:");
        double a = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Bitte gebe dein b ein:");
        double b = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Bitte gebe dein c ein:");
        double c = Convert.ToDouble(Console.ReadLine());

        // Scheitelpunkt berechnen
        double scheitelpunktX = -b / (2 * a);
        double scheitelpunktY = a * Math.Pow(scheitelpunktX, 2) + b * scheitelpunktX + c;
        Console.WriteLine($"Der Scheitelpunkt ist S({scheitelpunktX}, {scheitelpunktY})");

        // Nullstellen berechnen
        double discriminant = Math.Pow(b, 2) - 4 * a * c;
        if (discriminant < 0)
        {
            Console.WriteLine("Die Funktion hat keine Nullstellen");
        }
        else
        {
            double x1 = (-b + Math.Sqrt(discriminant)) / (2 * a);
            double x2 = (-b - Math.Sqrt(discriminant)) / (2 * a);
            Console.WriteLine($"Die Nullstellen sind x1={x1} und x2={x2}");
        }

        // Schnittpunkt mit der Y-Achse
        Console.WriteLine($"Der Schnittpunkt mit der Y-Achse ist P(0, {c})");

        double[] wertetabelle = new double[11];

        //Ausgabe 
        Console.WriteLine("Wertetabelle");
        for (int i = 0; i < 11; i++)
        {
            wertetabelle[i] = a * Math.Pow(i, 2) + b * i + c;
            Console.WriteLine($"f({i}) = {wertetabelle[i]}");
        }
    }
}
