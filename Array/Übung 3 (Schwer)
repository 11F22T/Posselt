using System;
using System.Linq;

namespace Übung_3__Schwer_
{
    internal class Program
    {
        static Random random = new Random();
        static void Main(string[] args)
        {
            //HI
            Console.WriteLine("Willkommen beim Array Generator!");
            Console.WriteLine();

            // Eingabe
            Console.WriteLine("Geben Sie die gewünschte Länge des Arrays ein: ");
            int arrayLength = HoleGanzzahlVomBenutzer(1, 1000);
            (int min, int max) = HoleMinUndMaxVomBenutzer();

            // Aufruf
            int[] zahlenArray = GeneriereArray(arrayLength, min, max);
            (double Summe, double Durchschnitt, double KleinsteZahl, double GroessteZahl) = BerechneStatistiken(zahlenArray);
            Console.WriteLine();

            // Ausgabe 
            AusgabeArrayUndHaeufigkeit(zahlenArray);
            Console.WriteLine($"Summe der Zahlen: {Summe}");
            Console.WriteLine($"Durchschnitt der Zahlen: {Durchschnitt}");
            Console.WriteLine($"Kleinste Zahl: {KleinsteZahl}");
            Console.WriteLine($"Größte Zahl: {GroessteZahl}");
            Console.WriteLine("---------------------------------------------------------------------------------------------------------");

            SucheZahlInArray(zahlenArray);
        }

        private static int[] GeneriereArray(int laenge, int min, int max)
        {
            // Erzeugt ein neues Array mit der gegebenen Länge, um die generierten Zahlen zu speichern
            int[] array = new int[laenge];

            // Füllt das Array mit Zufallszahlen im gegebenen Bereich
            for (int i = 0; i < laenge; i++)
            {
                array[i] = random.Next(min, max + 1);
            }

            // Sortiert das Array in aufsteigender Reihenfolge
            Array.Sort(array);

            // Gibt das generierte Array zurück
            return array;
        }

        private static void AusgabeArrayUndHaeufigkeit(int[] array)
        {
            // Gibt eine Überschrift aus
            Console.WriteLine("Inhalt des Arrays:");

            // Durchläuft das Array und gibt jede Zahl aus
            foreach (int zahl in array)
            {
                Console.Write(zahl + " ");
            }

            // Gibt eine leere Zeile aus
            Console.WriteLine();

            // Gibt eine Trennlinie aus
            Console.WriteLine("---------------------------------------------------------------------------------------------------------");

            // Gibt eine Überschrift aus
            Console.WriteLine("Häufigkeit jeder Zahl:");

            // Array wird vorausgesetzt sortiert zu sein
            int currentNumber = array[0];
            int count = 1;

            // Durchläuft das Array und zählt die Häufigkeit jeder Zahl
            for (int i = 1; i < array.Length; i++)
            {
                if (array[i] == currentNumber)
                {
                    // Wenn die aktuelle Zahl gleich der vorherigen ist, erhöhe den Zähler
                    count++;
                }
                else
                {
                    // Wenn die aktuelle Zahl nicht gleich der vorherigen ist, gib die vorherige Zahl und ihre Häufigkeit aus
                    Console.WriteLine($"Zahl {currentNumber}: {count} mal");

                    // Setze die aktuelle Zahl und den Zähler zurück
                    currentNumber = array[i];
                    count = 1;
                }
            }

            // Gib die letzte Zahl und ihre Häufigkeit aus
            Console.WriteLine($"Zahl {currentNumber}: {count} mal");

            // Gibt eine Trennlinie aus
            Console.WriteLine("---------------------------------------------------------------------------------------------------------");
        }

        public static (double Summe, double Durchschnitt, double KleinsteZahl, double GroessteZahl) BerechneStatistiken(int[] zahlenArray)
        {
            // Berechnet die Summe der Zahlen im Array und weist sie der Summe-Eigenschaft von stats zu
            double Summe = zahlenArray.Sum();

            // Berechnet den Durchschnitt der Zahlen im Array und weist ihn der Durchschnitt-Eigenschaft von stats zu
            double Durchschnitt = zahlenArray.Average();

            // Ermittelt die kleinste Zahl im Array und weist sie der KleinsteZahl-Eigenschaft von stats zu
            double KleinsteZahl = zahlenArray.Min();

            // Ermittelt die größte Zahl im Array und weist sie der GroessteZahl-Eigenschaft von stats zu
            double GroessteZahl = zahlenArray.Max();

            // Gibt das stats-Objekt zurück
            return (Summe, Durchschnitt, KleinsteZahl, GroessteZahl);
        }

        public static void SucheZahlInArray(int[] array)
        {
            // Gibt eine Nachricht aus, um die zu suchende Zahl einzugeben
            Console.WriteLine("Welche Zahl suchst du?");

            // Ruft die Methode HoleGanzzahlVomBenutzer auf, um eine Ganzzahl zwischen 1 und 1000 vom Benutzer zu erhalten, und weist sie der Variable suchZahl zu
            int suchZahl = HoleGanzzahlVomBenutzer(1, 1000);

            // Gibt eine entsprechende Meldung aus, je nachdem, ob die Zahl im Array gefunden wurde oder nicht
            if (array.Contains(suchZahl))
            {
                Console.WriteLine($"Die Zahl {suchZahl} wurde im Array gefunden.");
            }
            else
            {
                Console.WriteLine($"Die Zahl {suchZahl} wurde nicht im Array gefunden.");
            }
        }

        public static int HoleGanzzahlVomBenutzer(int min, int max)
        {
            // Eine Variable zur Speicherung der eingegebenen Zahl
            int zahl;

            // Eine Schleife, die solange läuft, bis eine gültige Eingabe erhalten wird
            while (true)
            {
                // Überprüft, ob die Eingabe eine Ganzzahl zwischen min und max ist
                if (!int.TryParse(Console.ReadLine(), out zahl) || zahl < min || zahl > max)
                {
                    // Gibt eine Fehlermeldung aus, wenn die Eingabe ungültig ist, und fordert den Benutzer auf, eine gültige Ganzzahl einzugeben
                    Console.Write($"Ungültige Eingabe. Bitte geben Sie eine Ganzzahl zwischen {min} und {max} ein: ");
                }
                else
                {
                    // Beendet die Bedingung und gibt die eingegebene Ganzzahl zurück, wenn die Eingabe gültig ist
                    break;
                }
            }

            return zahl;
        }

        public static (int, int) HoleMinUndMaxVomBenutzer()
        {
            // Variablen zur Speicherung der kleinsten und größten Zahl
            int min, max;

            // Eine Schleife, die solange läuft, bis gültige Eingaben für min und max erhalten werden
            while (true)
            {

                Console.WriteLine("Was soll die kleinstmögliche Zahl sein?");

                // Ruft die Methode HoleGanzzahlVomBenutzer auf,und weist sie den Variablen min und max zu
                min = HoleGanzzahlVomBenutzer(1, 100);

                // Ruft die Methode HoleGanzzahlVomBenutzer auf,und weist sie den Variablen min und max zu
                Console.WriteLine("Was soll die größtmögliche Zahl sein?");
                max = HoleGanzzahlVomBenutzer(min, 100);

                // Überprüft, ob die maximale Zahl größer als die minimale Zahl ist
                if (min < max)
                {
                    // Beendet die Bedingung und gibt das Tuple (min, max) zurück, wenn die Eingaben gültig sind
                    break;
                }

                // Gibt eine Fehlermeldung aus, dass die maximale Zahl größer sein muss als die minimale Zahl
                Console.WriteLine("Die maximale Zahl muss größer als die minimale Zahl sein. Bitte versuchen Sie es erneut.");
            }

            return (min, max);
        }
    }
}
