-----------------------------------------------------------------------------------------------------------------------------------------------------------------
(Bubble-Sort-Methode)
Die Bubble-Sort-Methode ist ein einfacher Sortieralgorithmus, der auf Vergleichen und Vertauschen von Elementen basiert.
Der Algorithmus durchläuft das zu sortierende Array wiederholt, vergleicht benachbarte Elemente und tauscht sie aus, wenn sie in der falschen Reihenfolge sind. Dieser Prozess wird so lange wiederholt, bis das gesamte Array sortiert ist.

Hier ist eine Erklärung der Bubble-Sort-Methode:

1. Gehe das Array von links nach rechts durch und vergleiche jeweils zwei benachbarte Elemente.
2. Wenn das linke Element größer als das rechte Element ist, tausche sie miteinander.
3. Gehe zum nächsten Paar von Elementen und wiederhole den Vergleich und den Tauschprozess.
4. Wiederhole diesen Vorgang für alle Elemente im Array, bis das größte Element an die letzte Position wandert.
5. Reduziere den Bereich, in dem Vergleiche und Tausche stattfinden müssen, um das bereits sortierte Element am Ende des Arrays auszuschließen.
6. Wiederhole die Schritte 1-5, bis das gesamte Array sortiert ist.

Der Name "Bubble Sort" leitet sich von der Idee ab, dass die größten Elemente allmählich wie Blasen an die richtige Position "aufsteigen".
Der Algorithmus arbeitet durch wiederholtes "Aufsteigen" der größten Elemente von links nach rechts.

Die Bubble-Sort-Methode hat eine durchschnittliche und schlechteste Fallkomplexität von O(n^2), was bedeutet, dass die Anzahl der Vergleiche und Tauschoperationen quadratisch mit der Größe des Arrays wächst.
Daher ist der Algorithmus nicht effizient für große Arrays. Es ist eher eine einfache Sortiermethode, die in Bildungs- oder Lernzwecken verwendet wird oder wenn die Eingabe bereits teilweise sortiert ist.

{Code Beispiel}

int[] array = { 5, 2, 8, 12, 3 };

Console.WriteLine("Unsortiertes Array: ");
foreach (int element in array)
{
    Console.Write(element + " ");
}

BubbleSort(array);

Console.WriteLine("\nSortiertes Array: ");
foreach (int element in array)
{
    Console.Write(element + " ");
}

int[] array = { 5, 2, 8, 12, 3 };

Console.WriteLine("Unsortiertes Array: ");
foreach (int element in array)
{
    Console.Write(element + " ");
}

BubbleSort(array);

Console.WriteLine("\nSortiertes Array: ");
foreach (int element in array)
{
    Console.Write(element + " ");
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------
(Übung 3)
Der Code stellt ein Programm dar, das dem Benutzer ermöglicht, ein Array von Zahlen zu generieren und verschiedene Statistiken über das Array zu berechnen.
Hier ist eine Zusammenfassung der Funktionalität:

1. Das Programm fordert den Benutzer auf, die gewünschte Länge des Arrays einzugeben.
2. Der Benutzer gibt die Länge des Arrays ein, und das Programm überprüft, ob die Eingabe gültig ist.
3. Das Programm fordert den Benutzer auf, die kleinste und größte Zahl für das Array einzugeben.
4. Der Benutzer gibt die Werte für die kleinste und größte Zahl ein, und das Programm überprüft auch hier die Gültigkeit der Eingabe.
5. Das Programm generiert ein Array von Zahlen mit der angegebenen Länge und dem Bereich der Zahlen.
6. Das Programm berechnet verschiedene statistische Informationen über das Array, wie die Summe, den Durchschnitt, die kleinste und größte Zahl.
7. Das Programm gibt das generierte Array und die Häufigkeit jeder Zahl im Array aus.
8. Das Programm gibt die berechneten statistischen Informationen über das Array aus.
9. Das Programm fragt den Benutzer nach einer Zahl und sucht sie im Array.
10. Das Programm gibt eine entsprechende Meldung aus, ob die Zahl im Array gefunden wurde oder nicht.

Der Code verwendet verschiedene Methoden, um die Funktionalität aufzuteilen und den Code lesbarer und wiederverwendbarer zu machen.
Es werden auch Klassen und Eigenschaften verwendet, um die statistischen Informationen über das Array zu strukturieren und zu speichern.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
